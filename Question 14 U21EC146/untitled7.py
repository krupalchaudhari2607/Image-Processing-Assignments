# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yk30IcoNc2x9d-K6kCj_Rh8FixkvnE7o
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter
# Define the filter order
order = 5
# Define the cutoff frequency
cutoff = 0.5
# Define the filter coefficients
b, a = butter(order, cutoff, btype='lowpass')
# Load the image
image = plt.imread('/content/1184886-digital-art-eyes-planet-space-artwork-light-eye-darkness-screenshot-computer-wallpaper-human-body-organ-close-up.jpg')
# Apply the filter to the image
filtered_image = lfilter(b, a, image)
# Plot the original and filtered images
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.title('Original Image')
plt.subplot(1, 2, 2)
plt.imshow(filtered_image)
plt.title('Filtered Image')
plt.show()
# Increase the filter order and plot the results
for order in range(1, 10):
    b, a = butter(order, cutoff, btype='lowpass')
    filtered_image = lfilter(b, a, image)
    plt.subplot(1, 2, 1)
    plt.imshow(image)
    plt.title('Original Image')
    plt.subplot(1, 2, 2)
    plt.imshow(filtered_image)
    plt.title('Filtered Image (Order {})'.format(order))
    plt.show()
# Comments on the obtained results
# The BLPF does not introduce the ringing effect, as does the ideal LPF. This is because the BLPF has a smoother frequency response than the ideal LPF. The ideal LPF has a sharp cutoff at the cutoff frequency, which causes the ringing effect. The BLPF has a more gradual cutoff, which prevents the ringing effect.
# As the order of the filter increases, the filtered image becomes smoother. This is because the higher-order filters have a wider transition band, which allows more of the high-frequency components of the image to pass through. However, the higher-order filters also have a longer impulse response, which can cause blurring in the filtered image.

